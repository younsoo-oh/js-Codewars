Given an array of integers, find the one that appears an odd number of times.

There will always be only one integer that appears an odd number of times.

ex)
[20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5] //return 5
[1,1,2,-2,5,2,4,4,-1,-2,5] //return -1
[1,1,1,1,1,1,10,1,1,1,1] //return 10
[5,4,3,2,1,5,4,3,2,10,10] //return 1



My code
function findOdd(A) {
  let count = 0;
  let arr = A.sort((a, b) => a - b);
  for (let i = 0; i <= arr.length; i++) {
    for (let j = 0; j <= arr.length; j++) {
      if (arr[i] === arr[j]) {
        count++;
      }
    }
    if (count % 2 === 1) {
      return arr[i];
    }
  }
}

[20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5] 인경우
먼저 sort를 사용하여 올림차순으로 정렬시키고 [-2, -2, -1, -1, 1, 1, 2, 2, 3, 3, …],
반복문을 두번돌려서 현재 i값과 j값이 같은 경우에는 count를 증가시키도록 하였다. 
arr[i]인 arr[0] -2가 arr[j]인 arr[0] -2 부터 arr[1] -2, arr[2] -1 순으로 비교하면서 
값이 같은 경우는 count를 증가시키고, 다시 arr[i]인 arr[1] -2가 j와 비교하면서 count를 센다.
count가 홀수가 되는 경우만 arr[i]을 호출시켰다.



other code
const findOdd = (xs) => xs.reduce((a, b) => a ^ b);

^(XOR연산자)는 서로 값이 다를때 true가 되고, 값이 같으면 false가 된다.
reduce로 앞에값과 뒤의값을 비교하면서 다른경우만 호출되도록 하였다.
++ 두쌍씩 있는경우 0을 호출하였다.



other code 2
function findOdd(A) {
  for(let i = 0; i < A.length; i++){  
    if((A.filter(function(item){return item === A[i]; })).length % 2 !== 0){
      return A[i];
    }
  }
  return 0;
}

filter는 조건에 맞는값들을 모아서 새로운 배열로 만들어 낸다.
item은 각 배열의 요소들로서 A[i]와 같고, 그 갯수가 홀수인 경우만 arr[i]을 호출하도록 하였다.