To participate in a prize draw each one gives his/her firstname.

Each letter of a firstname has a value which is its rank in the English alphabet. 
A and a have rank 1, B and b rank 2 and so on.

The length of the firstname is added to the sum of these ranks hence a number som.

An array of random weights is linked to the firstnames and
each som is multiplied by its corresponding weight to get what they call a winning number.

names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
weights: [1, 4, 4, 5, 2, 1]

PauL -> som = length of firstname + 16 + 1 + 21 + 12 = 4 + 50 -> 54
The *weight* associated with PauL is 2 so PauL's *winning number* is 54 * 2 = 108.

Now one can sort the firstnames in decreasing order of the winning numbers.
When two people have the same winning number sort them alphabetically by their firstnames.

parameters: st a string of firstnames, we an array of weights, n a rank
return: the firstname of the participant whose rank is n (ranks are numbered from 1)

names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
weights: [1, 4, 4, 5, 2, 1]
n: 4

The function should return: "PauL"

Notes: 
The weight array is at least as long as the number of names, it can be longer.

If st is empty return "No participants".

If n is greater than the number of participants then return "Not enough participants".



My code
function rank(st, we, n) {
  const som = st.split(",")
  const arr = []
  for(let i=0; i<som.length; i++){
    if(st === ''){
      return "No participants"
    } if(n>som.length){
      return "Not enough participants"
    }
    const leng = som[i].length
    const change = som[i].toLowerCase().match(/[a-z]/gi)
													.map((el) => el.charCodeAt()-96).reduce((pre,cur) => pre+cur)
    const point = (leng+change)*we[i]
    arr.push([som[i],point])
  }
  arr.sort(
    function(a, b) {
      if (a[1] == b[1])
        return a[0] > b[0] ? 1 : -1;  //알파벳순 (a부터 z순) 나열
     return a[1] > b[1] ? -1 : 1;   //숫자 큰수부터 나열
  });
  return arr[n-1][0];
}

참가자가 없는 경우와 랭킹보다 참가자가 적은 경우는 for문안에 미리적어둠
PauL -> som = length of firstname + 16 + 1 + 21 + 12 = 4 + 50 -> 54
이부분에서 length of firstname 이 변수 leng (PauL은 4글자 => 4)
PauL을 소문자로 바꾸고(paul) 알파벳을 전부(match) map으로 각각 a=1, b=2... 와 같은
상태로 바꾼후(16,1,21,12) reduce로 각값을 더해준다.(50)
The *weight* associated with PauL is 2 so PauL's *winning number* is 54 * 2 = 108.
point는 비교할 점수 값인데 주어진 we값 배열순서에 맞추어 곱해준다.(54 * 2 = 108)

마지막으로 arr라는 배열에 2중배열로 각 이름과 point를 넣어준다.
여기까지 [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
에서 각각 [["COLIN",58],["AMANDAB",172],...] 이런 상태가 된다.

순위를 매기기 위해서 sort를 사용하는데 가끔씩 point값이 같은경우가 있다.(index[1]값)
sort 인자로 a,b를 두어서 비교하는데 일반적으로는 a[1] > b[1] ? -1 : 1; 으로 point만 비교해서
큰수가 앞으로 가게 되있는데 point가 같은경우는 이름의 알파벳순으로 다시 순위를 매기기 때문에
if문으로 point값이 같으면 알파벳순으로 다시 나열되도록 하였다.
마지막으로 순위대로 나열이 끝난 arr을 인자 n(순위)로 불러서 그중 이름만 호출되도록 하였다.



other code
function rank(st, we, n) {
  let names = st.split(',')
  if (!st.length) return 'No participants'
  if (names.length < n) return 'Not enough participants'
  return names.map((n, i) => ({
      name: n,
      s: [...n.toLowerCase()].reduce((a, b) => a + b.charCodeAt() - 95, 0) * we[i]
    }))
    .sort((a, b) => a.name > b.name)
    .sort((a, b) => b.s - a.s)
    [n - 1].name
}

names는 ["COLIN", "AMANDBA", "AMANDAB", "CAROL", "PauL", "JOSEPH"] 상태에서
if문으로 조건에 맞지않는 부분을 먼저 적어둠
names에 map을 사용하여 배열안에 객체를 만드는 방식으로 함
[Object, Object, Object, Object, Object, Object] 에서 구체적으로 
[{name:"COLIN" s:58},{name:"AMANDBA" s:172},...] 상태와 같다.
첫번째 sort는 알파벳순이 되도록, 두번째 sort는 점수가 큰순으로 정렬되도록 하였다.
[{name:"CAROL" s:270},{name:"AMANDBA" s:172},...] 상태와 같다.
마지막으로 [n - 1].name을 호출하여 n=4을 넣은 경우 4번째 위치의 객체의 name을 호출한다. 