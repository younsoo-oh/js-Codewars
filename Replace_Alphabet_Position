In this kata you are required to, given a string, replace every letter with its position in the alphabet.

If anything in the text isn't a letter, ignore it and don't return it.

"a" = 1, "b" = 2, etc.

Example

alphabetPosition("The sunset sets at twelve o' clock.")
return "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11" (as a string)


My code

function alphabetPosition(text) {
  let alpha = []
  let t = text.toLowerCase().split("")
  let result = []
  for (let i =1; i<=26; i++){
    alpha.push(String.fromCharCode(96+i))
  }
  for(let i=0; i<t.length; i++){
    for(let j=0; j<alpha.length; j++){
      if(t[i]===alpha[j]){
        result.push(j+1)
      }
    }
  }
  return result.join(" ")
}

alpha에 알파벳을 a~z까지 각각 배열로 나열시키고 인자인 text는 소문자로 받으면서 각각 배열로
나누어 지도록 함. 반복문을 중첩하여 text와 알파벳의 인덱스가 같은 경우 결과값으로 넣어주고
(j+1은 인덱스가 0부터 시작하기때문) 결과값인 배열을 join으로 문자열로 풀어서 return한다.



other code 1

function alphabetPosition(text) {
  return text
    .toUpperCase()
    .match(/[a-z]/gi)
    .map( (c) => c.charCodeAt() - 64)
    .join(' ');
}

match는 동일한 단어를 문자열에서 찾아주는 함수이다.
해당문자열.match('찾고싶은단어') 여기까지 text=abcd 의 경우 ["A", "B", "C", "D"]
아스키코드를 활용하여 대문자A는 코드번호 65이기때문에 -64로하면 1이 남음
이런식으로 map을 사용하여 새로운 배열을 만듬 [1, 2, 3, 4]
마지막으로 join으로 배열을 풀어준다. 

other code 2

function alphabetPosition(text) {
  return text.match(/[a-zA-Z]/g).map( (el) => el.toLowerCase().charCodeAt() - 96 ).join(' ');
}

match로 소문자 대문자 알파벳을 전부 찾음 text=abcd 의 경우 ["a", "b", "c", "d"]
map으로 각각 소문자로 바꾸고 아스키 코드번호-96 (소문자a는 97이기에 -96으로 1을 남김)
[1, 2, 3, 4] 마지막으로 배열풀기