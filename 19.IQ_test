Bob is preparing to pass IQ test. The most frequent task in this test is
to find out which one of the given numbers differs from the others.
Bob observed that one number usually differs from the others in evenness.
Help Bob — to check his answers, he needs a program that among the given numbers
finds one that is different in evenness, and return a position of this number.

! Keep in mind that your task is to help Bob solve a real IQ test,
which means indexes of the elements start from 1 (not 0)

iqTest("2 4 7 8 10") => 3 // Third number is odd, while the rest of the numbers are even
iqTest("1 2 1 1") => 2 // Second number is even, while the rest of the numbers are odd



Mycode
function iqTest(numbers){
  const calc = numbers.split(" ").map((num) => num%2)
  const zero = calc.filter((n)=> n === 0).length
  const one = calc.filter((n)=> n === 1).length
  if(zero > one){
    return calc.indexOf(1)+1
  } else {
    return calc.indexOf(0)+1
  }
}

string상태로 인자를 넣으면 split(" ") //["2", "4", "7", "8", "10"]
그다음 map으로 각각을 2로 나누었을때 나머지를 구한다. //[0, 0, 1, 0, 0]
zero는 calc안의 0의 갯수, one은 calc안의 1의 갯수이다.
1의 갯수보다 0의 갯수가 많으면 calc에서 indexOf를 사용하여 1의 index위치를 구하고 +1을 해준다.
1의 갯수가 많으면 0의 index위치를 구하고 +1을 해준다.


other code
function iqTest(numbers){
  var nums = numbers.split(" ").map(x => x % 2);  
  var sum = nums.reduce((a,b) => a + b);  
  var target = sum > 1 ? 0 : 1;
  
  return nums.indexOf(target) + 1;
}

iqTest("2 4 7 8 10")의 예시
nums는 [0, 0, 1, 0, 0] 그렇기때문에 sum은 1이된다
target은 sum이 1보다 큰경우는 0이 한개이기에 target=0, 반대는 1만 남기에 target=1이 됨
indexOf로 target의 인덱스위치를 찾고 +1을 해준다.


other code 2
function iqTest(numbers){
  numbers = numbers.split(" ").map(function(el){return parseInt(el)});
  
  var odd = numbers.filter(function(el){ return el % 2 === 1});
  var even = numbers.filter(function(el){ return el % 2 === 0});
  
  return odd.length < even.length ? (numbers.indexOf(odd[0]) + 1) : (numbers.indexOf(even[0]) + 1);
}

iqTest("2 4 7 8 10")의 예시
numbers는 [2, 4, 7, 8, 10] odd는 [7] even은 [2, 4, 8, 10]
odd의 길이와 even의 길이를 비교하여 작은수(무조건 1개,인덱스는 0이됨)를 찾고 +1을 해준다.

